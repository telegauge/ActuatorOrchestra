#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SH110X.h>
#include <WiFi.h>
#include <Wire.h>
#include <Adafruit_PWMServoDriver.h>


Adafruit_SH1107 display = Adafruit_SH1107(64, 128, &Wire);

// OLED FeatherWing buttons map to different pins depending on board:
#if defined(ESP8266)
#define BUTTON_A 0
#define BUTTON_B 16
#define BUTTON_C 2
#elif defined(ESP32) && !defined(ARDUINO_ADAFRUIT_FEATHER_ESP32S2) && !defined(ARDUINO_ADAFRUIT_FEATHER_ESP32S3) && !defined(ARDUINO_ADAFRUIT_FEATHER_ESP32S3_NOPSRAM)
#define BUTTON_A 15
#define BUTTON_B 32
#define BUTTON_C 14
#elif defined(ARDUINO_STM32_FEATHER)
#define BUTTON_A PA15
#define BUTTON_B PC7
#define BUTTON_C PC5
#elif defined(TEENSYDUINO)
#define BUTTON_A 4
#define BUTTON_B 3
#define BUTTON_C 8
#elif defined(ARDUINO_NRF52832_FEATHER)
#define BUTTON_A 31
#define BUTTON_B 30
#define BUTTON_C 27
#else  // 32u4, M0, M4, nrf52840, esp32-s2, esp32-s3 and 328p
#define BUTTON_A 9
#define BUTTON_B 6
#define BUTTON_C 5
#endif

WiFiClient wifi;

Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver();
#define SERVOMIN  150 // Minimum pulse length count
#define SERVOMAX  600 // Maximum pulse length count

// Function prototype
void setServo(int ch, int angle);

void setup() {
  Serial.begin(115200); 

  WiFi.setHostname("AO-Ukulele");
  WiFi.begin("Blaze", "shellycat");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("\nConnected!");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

Wire.begin();
  display.begin(0x3C, true);  // Address 0x3C default

  // // Show image buffer on the display hardware.
  // // Since the buffer is intialized with an Adafruit splashscreen
  // // internally, this will display the splashscreen.
  // display.display();
  // delay(1000);

  // // Clear the buffer.
  // display.clearDisplay();
  // display.display();

  // display.setRotation(3);
  // Serial.println("Button test");

//   pinMode(BUTTON_A, INPUT_PULLUP);
//   pinMode(BUTTON_B, INPUT_PULLUP);
//   pinMode(BUTTON_C, INPUT_PULLUP);

//   // text display tests
//   display.setTextSize(1);
//   display.setTextColor(SH110X_WHITE);
//   display.setCursor(50, 0);
//   display.println(WiFi.localIP());
//   display.display();  // actually display all of the above

//   // 'bafkreiff63na3hlu3wxj5cisp5r7qo4ijyfkeobxbo4dhjv5gi7w66fxoe', 32x32px
// // 'bafkreiff63na3hlu3wxj5cisp5r7qo4ijyfkeobxbo4dhjv5gi7w66fxoe', 64x64px
// const unsigned char logo [] PROGMEM = {
// 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 	0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 
// 	0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 
// 	0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 
// 	0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x12, 0x00, 0x00, 0x00, 
// 	0x00, 0x00, 0x00, 0x7a, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6a, 0x56, 0x00, 0x00, 0x00, 
// 	0x00, 0x00, 0x00, 0x0a, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x56, 0x00, 0x00, 0x00, 
// 	0x00, 0x00, 0x00, 0x7a, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6a, 0x56, 0x00, 0x00, 0x00, 
// 	0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 
// 	0x00, 0x00, 0x00, 0x05, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0xa0, 0x00, 0x00, 0x00, 
// 	0x00, 0x00, 0x00, 0x05, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0xa0, 0x00, 0x00, 0x00, 
// 	0x00, 0x00, 0x00, 0x05, 0xa0, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0xb0, 0xb8, 0x00, 0x00, 
// 	0x00, 0x00, 0x60, 0x3d, 0xbd, 0xff, 0x00, 0x00, 0x00, 0x00, 0x60, 0x65, 0xa7, 0xc7, 0x00, 0x00, 
// 	0x00, 0x00, 0x60, 0xc5, 0xa3, 0x9b, 0x00, 0x00, 0x00, 0x01, 0xf9, 0x85, 0xa1, 0xbd, 0x80, 0x00, 
// 	0x00, 0x01, 0x6f, 0x05, 0xa0, 0xbd, 0x80, 0x00, 0x00, 0x03, 0xff, 0x07, 0xe0, 0xd9, 0x00, 0x00, 
// 	0x00, 0x03, 0x7f, 0x0f, 0xf0, 0xc3, 0x00, 0x00, 0x00, 0x01, 0x1f, 0x0f, 0xf0, 0xff, 0x00, 0x00, 
// 	0x00, 0x01, 0xf9, 0x8f, 0xf1, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8f, 0xf1, 0x8f, 0x00, 0x00, 
// 	0x00, 0x00, 0x00, 0x8f, 0xf1, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8f, 0xf1, 0x07, 0x00, 0x00, 
// 	0x00, 0x00, 0x01, 0x87, 0xe1, 0x87, 0x00, 0x00, 0x00, 0x00, 0x03, 0x05, 0xa0, 0xc7, 0x80, 0x00, 
// 	0x00, 0x00, 0x06, 0x05, 0xa0, 0x6c, 0x80, 0x00, 0x00, 0x00, 0x04, 0x05, 0xa0, 0x25, 0x80, 0x00, 
// 	0x00, 0x00, 0x0c, 0x05, 0xa0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x1f, 0xf8, 0x3e, 0x00, 0x00, 
// 	0x00, 0x00, 0x0c, 0x1f, 0xf8, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x08, 0x1f, 0xf8, 0xe8, 0x00, 0x00, 
// 	0x00, 0x00, 0x08, 0x1f, 0xf9, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x1f, 0xfb, 0xd8, 0x00, 0x00, 
// 	0x00, 0x00, 0x0c, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x70, 0x00, 0x00, 
// 	0x00, 0x00, 0x02, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0xc0, 0x00, 0x00, 
// 	0x00, 0x00, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x0e, 0x00, 0x00, 0x00, 
// 	0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
// 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
// };

// // Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 528)
// const int epd_bitmap_allArray_LEN = 1;
// const unsigned char* epd_bitmap_allArray[1] = {
// 	logo
// };

//   display.drawBitmap(-10,0, logo, 64,64, SH110X_WHITE);
//  display.display();

//    pwm.begin();
//   pwm.setPWMFreq(50);  // Standard servo frequency (50 Hz)


}

bool go = true;
int servo = 4;
int dr = 5;
int angle = 90;

#define LINE1 12
#define LINE2 30
#define LINE3 48

void loop() {
  // display.fillRect(50, 10, 128-50, 64, SH110X_BLACK);

  // if (!digitalRead(BUTTON_A)) {
  //   go = !go;
  //   delay(200);
  // } 
  // if (!digitalRead(BUTTON_C)) {
  //   servo = servo + 1;
  //   if (servo>7) servo= 4;
  //   delay(200);
  // }

  // // WHich Servo
  // display.setCursor(120, LINE1);
  // display.print(servo);

  // display.setCursor(100, LINE2);
  // display.print(angle);

  // // GO
  //   display.setCursor(110, LINE3);
  // if (go) {
  //   display.print(">");
  // }
  // else {
  //   display.print("||");
  //   setServo(servo, 90);
  //   angle = 90;

  // }


  // delay(10);
  // yield();
  // display.display();

  // if (go) {
  //   angle += dr;
  //   // Serial.print(angle);
  //   // Serial.print(" dr:");
  //   // Serial.println(dr);

  //   int min = 80;
  //   int max = 100;
  //   if (angle > max) {
  //     dr = -dr;
  //     setServo(servo, max);
  //     // setServo(servo+1, max);
  //   } 
  //   if (angle < min) {
  //     dr = -dr;
  //     setServo(servo, min);
  //     // setServo(servo+1, min);
  //   }

  // }

}


void setServo(int ch, int angle) {
  // int pulseLen = map(angle, 0, 180, SERVOMIN, SERVOMAX);
  // pwm.setPWM(ch, 0, pulseLen);
}

