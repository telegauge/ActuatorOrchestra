#include "OledDisplay.h"

// https://learn.adafruit.com/adafruit-gfx-graphics-library

const unsigned char logo[] PROGMEM = {
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x12, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x7a, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6a, 0x56, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x0a, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x56, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x7a, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6a, 0x56, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x05, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0xa0, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x05, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0xa0, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x05, 0xa0, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0xb0, 0xb8, 0x00, 0x00,
		0x00, 0x00, 0x60, 0x3d, 0xbd, 0xff, 0x00, 0x00, 0x00, 0x00, 0x60, 0x65, 0xa7, 0xc7, 0x00, 0x00,
		0x00, 0x00, 0x60, 0xc5, 0xa3, 0x9b, 0x00, 0x00, 0x00, 0x01, 0xf9, 0x85, 0xa1, 0xbd, 0x80, 0x00,
		0x00, 0x01, 0x6f, 0x05, 0xa0, 0xbd, 0x80, 0x00, 0x00, 0x03, 0xff, 0x07, 0xe0, 0xd9, 0x00, 0x00,
		0x00, 0x03, 0x7f, 0x0f, 0xf0, 0xc3, 0x00, 0x00, 0x00, 0x01, 0x1f, 0x0f, 0xf0, 0xff, 0x00, 0x00,
		0x00, 0x01, 0xf9, 0x8f, 0xf1, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8f, 0xf1, 0x8f, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x8f, 0xf1, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8f, 0xf1, 0x07, 0x00, 0x00,
		0x00, 0x00, 0x01, 0x87, 0xe1, 0x87, 0x00, 0x00, 0x00, 0x00, 0x03, 0x05, 0xa0, 0xc7, 0x80, 0x00,
		0x00, 0x00, 0x06, 0x05, 0xa0, 0x6c, 0x80, 0x00, 0x00, 0x00, 0x04, 0x05, 0xa0, 0x25, 0x80, 0x00,
		0x00, 0x00, 0x0c, 0x05, 0xa0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x1f, 0xf8, 0x3e, 0x00, 0x00,
		0x00, 0x00, 0x0c, 0x1f, 0xf8, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x08, 0x1f, 0xf8, 0xe8, 0x00, 0x00,
		0x00, 0x00, 0x08, 0x1f, 0xf9, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x1f, 0xfb, 0xd8, 0x00, 0x00,
		0x00, 0x00, 0x0c, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x70, 0x00, 0x00,
		0x00, 0x00, 0x02, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0xc0, 0x00, 0x00,
		0x00, 0x00, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x0e, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

#define LOG_X 0
#define LOG_Y 86
#define LOG_WIDTH 64
#define LOG_HEIGHT 42
#define LOG_SIZE 4
String logs[LOG_SIZE];

#define GRID_X 0
#define GRID_Y 13
#define GRID_WIDTH 64
#define GRID_HEIGHT 70
#define GRID_MARGIN 1

#define TOOLBAR_X 0
#define TOOLBAR_Y 0
#define TOOLBAR_WIDTH 64
#define TOOLBAR_HEIGHT 12

#define STRINGS 4
#define FRETS 6

OledDisplay::OledDisplay() : display(64, 128, &Wire)
{
}

void OledDisplay::begin()
{
	pinMode(BUTTON_A, INPUT_PULLUP);
	pinMode(BUTTON_B, INPUT_PULLUP);
	pinMode(BUTTON_C, INPUT_PULLUP);

	initDisplay();
	delay(500);
	initGrid();
	initToolbar();
}

void OledDisplay::initDisplay()
{
	display.begin(0x3C, true); // Address 0x3C default
	display.clearDisplay();
	display.setRotation(2);
	display.setTextSize(1);
	display.setTextWrap(false);
	display.setTextColor(SH110X_WHITE);

	display.drawBitmap(0, (GRID_HEIGHT - 64) / 2, logo, 64, 64, SH110X_WHITE);

	line(LOG_X, LOG_Y - 1, LOG_X + LOG_WIDTH, LOG_Y - 1);

	printLogs();
	display.display();
}

void OledDisplay::initGrid()
{
	int margin = GRID_MARGIN;

	clear(GRID_X, GRID_Y, GRID_WIDTH, GRID_HEIGHT);

	int X = margin + GRID_X;
	int Y = margin + GRID_Y;
	float dx = (GRID_WIDTH - 2 * margin) / STRINGS;
	float dy = (GRID_HEIGHT - 2 * margin) / FRETS;
	int W = STRINGS * dx;
	int H = FRETS * dy;

	for (float x = 0; x <= STRINGS; x++)
	{
		line(X + x * dx, Y, X + x * dx, Y + H);
		for (float y = 0; y <= FRETS; y++)
		{
			line(X, Y + y * dy, X + W, Y + y * dy);
		}
	}

	display.display();
}

void OledDisplay::initToolbar()
{
	display.fillRect(TOOLBAR_X, TOOLBAR_Y, TOOLBAR_WIDTH, TOOLBAR_HEIGHT, SH110X_WHITE);

	display.setTextColor(SH110X_BLACK);
	print("Paused", TOOLBAR_X + 10, TOOLBAR_Y + 2);
	display.display();
}

void OledDisplay::log(int value)
{
	log(String(value));
}

void OledDisplay::log(String value)
{
	for (int i = 0; i < LOG_SIZE - 1; i++)
	{
		logs[i] = logs[i + 1];
	}
	logs[LOG_SIZE - 1] = value;
	Serial.println("> " + value);
	printLogs();
	display.display();
}

void OledDisplay::log(const char *text)
{
	log(String(text));
}

bool OledDisplay::button(int button)
{
	return digitalRead(button) != HIGH;
}

void OledDisplay::printLogs()
{
	clear(LOG_X, LOG_Y, LOG_WIDTH, LOG_HEIGHT);
	display.setTextColor(SH110X_WHITE);

	for (int i = 0; i < LOG_SIZE; i++)
	{
		print(logs[i].c_str(), LOG_X, LOG_Y + i * 10 + 2);
	}
	display.display();
}

void OledDisplay::print(const char *text, int x, int y)
{
	display.setCursor(x, y);
	display.print(text);
}

void OledDisplay::line(int x1, int y1, int x2, int y2)
{
	// Serial.printf("Line %d %d %d %d\n", x1, y1, x2, y2);
	display.drawLine(x1, y1, x2, y2, SH110X_WHITE);
}

void OledDisplay::grid(int string, int fret, bool state)
{
	int margin = GRID_MARGIN;
	int dx = (GRID_WIDTH - 2 * margin) / STRINGS;
	int dy = (GRID_HEIGHT - 2 * margin) / FRETS;
	int x = GRID_X + string * dx;
	int y = GRID_Y + fret * dy;
	display.fillRect(x + 2 + 1, y + 2 + 1, dx - 4, dy - 4, state ? SH110X_WHITE : SH110X_BLACK);
	display.display();
}

void OledDisplay::clear(int x, int y, int width, int height)
{
	// Serial.printf("Clear %d %d %d %d\n", x, y, width, height);
	display.fillRect(x, y, width, height, SH110X_BLACK);
	// display.display();
}

void OledDisplay::toolbar(const char *text)
{
	Serial.printf("Toolbar %s\n", text);
	display.fillRect(TOOLBAR_X, TOOLBAR_Y, TOOLBAR_WIDTH, TOOLBAR_HEIGHT, SH110X_WHITE);
	display.setTextColor(SH110X_BLACK);
	print(text, TOOLBAR_X + 10, TOOLBAR_Y + 2);
	display.display();
}